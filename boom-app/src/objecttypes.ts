/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/objecttypes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['objecttype_list']
    put?: never
    post: operations['objecttype_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objecttypes/{objecttype_uuid}/versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Retrieve all versions of an OBJECTTYPE */
    get: operations['objectversion_list']
    put?: never
    /** @description Create an OBJECTTYPE with the given version. */
    post: operations['objectversion_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/objecttypes/{objecttype_uuid}/versions/{version}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description Retrieve an OBJECTTYPE with the given version. */
    get: operations['objectversion_read']
    /** @description Update an OBJECTTYPE with the given version. */
    put: operations['objectversion_update']
    post?: never
    /** @description Destroy the given OBJECTTYPE. */
    delete: operations['objectversion_delete']
    options?: never
    head?: never
    /** @description Partially update an OBJECTTYPE with the given version. */
    patch: operations['objectversion_partial_update']
    trace?: never
  }
  '/objecttypes/{uuid}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['objecttype_read']
    put: operations['objecttype_update']
    post?: never
    delete: operations['objecttype_delete']
    options?: never
    head?: never
    patch: operations['objecttype_partial_update']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * @description * `open` - Open
     *     * `intern` - Intern
     *     * `confidential` - Confidential
     *     * `strictly_confidential` - Strictly confidential
     * @enum {string}
     */
    DataClassificationEnum: 'open' | 'intern' | 'confidential' | 'strictly_confidential'
    ObjectType: {
      /**
       * Format: uri
       * @description URL reference to this object. This is the unique identification and location of this object.
       */
      readonly url?: string
      /**
       * Format: uuid
       * @description Unique identifier (UUID4)
       */
      uuid?: string
      /** @description Name of the object type */
      name: string
      /** @description Plural name of the object type */
      namePlural: string
      /** @description The description of the object type */
      description?: string
      /** @description Confidential level of the object type
       *
       *     * `open` - Open
       *     * `intern` - Intern
       *     * `confidential` - Confidential
       *     * `strictly_confidential` - Strictly confidential */
      dataClassification?: components['schemas']['DataClassificationEnum']
      /** @description Organization which is responsible for the object type */
      maintainerOrganization?: string
      /** @description Business department which is responsible for the object type */
      maintainerDepartment?: string
      /** @description Name of the person in the organization who can provide information about the object type */
      contactPerson?: string
      /** @description Email of the person in the organization who can provide information about the object type */
      contactEmail?: string
      /** @description Name of the system from which the object type originates */
      source?: string
      /** @description Indicates how often the object type is updated
       *
       *     * `real_time` - Real-time
       *     * `hourly` - Hourly
       *     * `daily` - Daily
       *     * `weekly` - Weekly
       *     * `monthly` - Monthly
       *     * `yearly` - Yearly
       *     * `unknown` - Unknown */
      updateFrequency?: components['schemas']['UpdateFrequencyEnum']
      /** @description Organization which is responsible for publication of the object type */
      providerOrganization?: string
      /**
       * Format: uri
       * @description Link to the documentation for the object type
       */
      documentationUrl?: string
      /** @description Key-value pairs of keywords related for the object type */
      labels?: unknown
      /**
       * Format: date
       * @description Date when the object type was created
       */
      readonly createdAt?: string
      /**
       * Format: date
       * @description Last date when the object type was modified
       */
      readonly modifiedAt?: string
      /** @description Shows whether the related objects can have geographic coordinates. If the value is 'false' the related objects are not allowed to have coordinates and the creation/update of objects with `geometry` property will raise an error  */
      allowGeometry?: boolean
      /** @description list of URLs for the OBJECTTYPE versions */
      readonly versions?: string[]
    }
    /** @description A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
     *     of primary key relationships.  Specifically:
     *
     *     * A 'url' field is included instead of the 'id' field.
     *     * Relationships to other instances are hyperlinks, instead of primary keys.
     *
     *     NOTE: this only works with DRF 3.1.0 and above. */
    ObjectVersion: {
      /** Format: uri */
      readonly url?: string
      /** @description Integer version of the OBJECTTYPE */
      readonly version?: number
      /** Format: uri */
      readonly objectType?: string
      /** @description Status of the object type version
       *
       *     * `published` - Published
       *     * `draft` - Draft
       *     * `deprecated` - Deprecated */
      status?: components['schemas']['StatusEnum']
      /**
       * JSON schema
       * @description JSON schema for Object validation
       */
      jsonSchema?: unknown
      /**
       * Format: date
       * @description Date when the version was created
       */
      readonly createdAt?: string
      /**
       * Format: date
       * @description Last date when the version was modified
       */
      readonly modifiedAt?: string
      /**
       * Published_at
       * Format: date
       * @description Date when the version was published
       */
      readonly publishedAt?: string | null
    }
    PaginatedObjectTypeList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['ObjectType'][]
    }
    PaginatedObjectVersionList: {
      /** @example 123 */
      count: number
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=4
       */
      next?: string | null
      /**
       * Format: uri
       * @example http://api.example.org/accounts/?page=2
       */
      previous?: string | null
      results: components['schemas']['ObjectVersion'][]
    }
    PatchedObjectType: {
      /**
       * Format: uri
       * @description URL reference to this object. This is the unique identification and location of this object.
       */
      readonly url?: string
      /**
       * Format: uuid
       * @description Unique identifier (UUID4)
       */
      uuid?: string
      /** @description Name of the object type */
      name?: string
      /** @description Plural name of the object type */
      namePlural?: string
      /** @description The description of the object type */
      description?: string
      /** @description Confidential level of the object type
       *
       *     * `open` - Open
       *     * `intern` - Intern
       *     * `confidential` - Confidential
       *     * `strictly_confidential` - Strictly confidential */
      dataClassification?: components['schemas']['DataClassificationEnum']
      /** @description Organization which is responsible for the object type */
      maintainerOrganization?: string
      /** @description Business department which is responsible for the object type */
      maintainerDepartment?: string
      /** @description Name of the person in the organization who can provide information about the object type */
      contactPerson?: string
      /** @description Email of the person in the organization who can provide information about the object type */
      contactEmail?: string
      /** @description Name of the system from which the object type originates */
      source?: string
      /** @description Indicates how often the object type is updated
       *
       *     * `real_time` - Real-time
       *     * `hourly` - Hourly
       *     * `daily` - Daily
       *     * `weekly` - Weekly
       *     * `monthly` - Monthly
       *     * `yearly` - Yearly
       *     * `unknown` - Unknown */
      updateFrequency?: components['schemas']['UpdateFrequencyEnum']
      /** @description Organization which is responsible for publication of the object type */
      providerOrganization?: string
      /**
       * Format: uri
       * @description Link to the documentation for the object type
       */
      documentationUrl?: string
      /** @description Key-value pairs of keywords related for the object type */
      labels?: unknown
      /**
       * Format: date
       * @description Date when the object type was created
       */
      readonly createdAt?: string
      /**
       * Format: date
       * @description Last date when the object type was modified
       */
      readonly modifiedAt?: string
      /** @description Shows whether the related objects can have geographic coordinates. If the value is 'false' the related objects are not allowed to have coordinates and the creation/update of objects with `geometry` property will raise an error  */
      allowGeometry?: boolean
      /** @description list of URLs for the OBJECTTYPE versions */
      readonly versions?: string[]
    }
    /** @description A type of `ModelSerializer` that uses hyperlinked relationships with compound keys instead
     *     of primary key relationships.  Specifically:
     *
     *     * A 'url' field is included instead of the 'id' field.
     *     * Relationships to other instances are hyperlinks, instead of primary keys.
     *
     *     NOTE: this only works with DRF 3.1.0 and above. */
    PatchedObjectVersion: {
      /** Format: uri */
      readonly url?: string
      /** @description Integer version of the OBJECTTYPE */
      readonly version?: number
      /** Format: uri */
      readonly objectType?: string
      /** @description Status of the object type version
       *
       *     * `published` - Published
       *     * `draft` - Draft
       *     * `deprecated` - Deprecated */
      status?: components['schemas']['StatusEnum']
      /**
       * JSON schema
       * @description JSON schema for Object validation
       */
      jsonSchema?: unknown
      /**
       * Format: date
       * @description Date when the version was created
       */
      readonly createdAt?: string
      /**
       * Format: date
       * @description Last date when the version was modified
       */
      readonly modifiedAt?: string
      /**
       * Published_at
       * Format: date
       * @description Date when the version was published
       */
      readonly publishedAt?: string | null
    }
    /**
     * @description * `published` - Published
     *     * `draft` - Draft
     *     * `deprecated` - Deprecated
     * @enum {string}
     */
    StatusEnum: 'published' | 'draft' | 'deprecated'
    /**
     * @description * `real_time` - Real-time
     *     * `hourly` - Hourly
     *     * `daily` - Daily
     *     * `weekly` - Weekly
     *     * `monthly` - Monthly
     *     * `yearly` - Yearly
     *     * `unknown` - Unknown
     * @enum {string}
     */
    UpdateFrequencyEnum:
      | 'real_time'
      | 'hourly'
      | 'daily'
      | 'weekly'
      | 'monthly'
      | 'yearly'
      | 'unknown'
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  objecttype_list: {
    parameters: {
      query?: {
        /** @description Confidential level of the object type
         *
         *     * `open` - Open
         *     * `intern` - Intern
         *     * `confidential` - Confidential
         *     * `strictly_confidential` - Strictly confidential */
        dataClassification?: 'confidential' | 'intern' | 'open' | 'strictly_confidential'
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        pageSize?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedObjectTypeList']
        }
      }
    }
  }
  objecttype_create: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ObjectType']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectType']
        }
      }
    }
  }
  objectversion_list: {
    parameters: {
      query?: {
        /** @description A page number within the paginated result set. */
        page?: number
        /** @description Number of results to return per page. */
        pageSize?: number
      }
      header?: never
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginatedObjectVersionList']
        }
      }
    }
  }
  objectversion_create: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ObjectVersion']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectVersion']
        }
      }
    }
  }
  objectversion_read: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectVersion']
        }
      }
    }
  }
  objectversion_update: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
        version: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['ObjectVersion']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectVersion']
        }
      }
    }
  }
  objectversion_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
        version: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  objectversion_partial_update: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path: {
        /** @description Unique identifier (UUID4) */
        objecttype_uuid: string
        version: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedObjectVersion']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectVersion']
        }
      }
    }
  }
  objecttype_read: {
    parameters: {
      query?: never
      header?: never
      path: {
        uuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectType']
        }
      }
    }
  }
  objecttype_update: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path: {
        uuid: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ObjectType']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectType']
        }
      }
    }
  }
  objecttype_delete: {
    parameters: {
      query?: never
      header?: never
      path: {
        uuid: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No response body */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  objecttype_partial_update: {
    parameters: {
      query?: never
      header: {
        /** @description Content type of the request body. */
        'Content-Type': 'application/json'
      }
      path: {
        uuid: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['PatchedObjectType']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ObjectType']
        }
      }
    }
  }
}
